typedef int<32>   st_time_t;
typedef uint<32>  st_addr_t;

struct tsidx_header {
  utf<8>    magic[8] /= R"Splunk\d{2}";
  uint<32>  num_values;           // Number of events.
  uint<32>  num_postings;         // Sum: number of events for each term.
  uint<32>  num_terms;            // Number of terms (tokens).
  uint<32>  et_array_size;        // Event-type array size.
  uint<32>  s_array_size;         // Source array size.
  uint<32>  st_array_size;        // Source-type array size.
  uint<32>  h_array_size;         // Host array size.
  uint<32>  d_array_size;         // Delete array size.
  uint<32>  et_nbits;             // Event-type number of bits.
  uint<32>  s_nbits;              // Source number of bits.
  uint<32>  st_nbits;             // Source-type number of bits.
  uint<32>  h_nbits;              // Host number of bits.
  uint<32>  d_nbits;              // Delete number of bits.
  st_time_t earliest;             // Earliest event time.
  st_time_t latest;               // Latest event time.
  uint<64>  w_flags;              // Format flags.
  st_addr_t lowest_addr;          // Lowest seek address.
  st_addr_t highest_addr;         // Highest seek address.
};

struct st_tsval_encoded {
  = st_time_t timestamp;
  = st_addr_t event_address;
};

struct st_term_metadata {
  = uint<32>  count;              // Number of events term occurs in.
  = st_time_t earliest;           // Time of earliest event term occurs in.
  = st_time_t latest;             // Time of latest event term occurs in.
};

struct st_fclex_body {
  = uint<32>  num_terms;          // Number of terms.
  = uint<32>  terms_per_block;
  = uint<32>  uncompressed_size;
  = uint<8>   data;
};

= tsidx_header          header;
= st_tsval_encoded      value[ header.num_values ];
= align<8>;
= uint<header.et_nbits> event_type[ header.et_array_size ];
= align<8>;
= uint<header.s_nbits>  source[ header.s_array_size ];
= align<8>;
= uint<header.st_nbits> source_type[ header.st_array_size ];
= align<8>;
= uint<header.h_nbits>  host[ header.st_array_size ];
= align<8>;
= uint<header.d_nbits>  deletes[ header.d_array_size ];
= align<8>;
= uint<32>              plo[ header.num_values ];
= align<8>;
= st_term_metadata      meta[ header.num_values ];
= align<8>;
= st_fclex_body         fclex_body;

  uint<32> num_blocks = (fclex_body.num_terms + fclex_body.terms_per_block - 1) / fclex_body.terms_per_block;

= uint<32>              block_offset[ num_blocks ];

  struct block {
    struct first_entry {
      = vlq     remainder_len;
      = uint<8> str[ remainder_len ];
    };

    struct remaining_entry {
      = vlq     common_prefix_len;
      = vlq     remainder_len;
      = uint<8> str[ remainder_len ];
    };

    = first_entry     first;
    = remaining_entry remaining[ fclex_body.terms_per_block - 1 ];
  };

  = block               blocks[ num_blocks ];

/* vim:set syntax=c et sw=2 ts=2: */
